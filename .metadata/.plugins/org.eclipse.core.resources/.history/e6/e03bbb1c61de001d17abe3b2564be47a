/** @file HL_sys_main.c 
*   @brief Application main file
*   @date 11-Dec-2018
*   @version 04.07.01
*
*   This file contains an empty main function,
*   which can be used for the application.
*/

/* 
* Copyright (C) 2009-2018 Texas Instruments Incorporated - www.ti.com  
* 
* 
*  Redistribution and use in source and binary forms, with or without 
*  modification, are permitted provided that the following conditions 
*  are met:
*
*    Redistributions of source code must retain the above copyright 
*    notice, this list of conditions and the following disclaimer.
*
*    Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the 
*    documentation and/or other materials provided with the   
*    distribution.
*
*    Neither the name of Texas Instruments Incorporated nor the names of
*    its contributors may be used to endorse or promote products derived
*    from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/


/* USER CODE BEGIN (0) */
#include "HL_gio.h"
#include "FreeRTOS.h"
#include "os_task.h"
#include "os_queue.h"
#include "os_semphr.h"
/* USER CODE END */

/* Include Files */

#include "HL_sys_common.h"

/* USER CODE BEGIN (1) */
#define GPIO_PORTA_BASE gioPORTB
#define GPIO_PIN_6 6
#define portTICK_PERIOD_uS ((float) 1000000/configTICK_RATE_HZ)
/* USER CODE END */

/** @fn void main(void)
*   @brief Application main function
*   @note This function is empty by default.
*
*   This function is called after startup.
*   The user can use this function to implement the application.
*/

/* USER CODE BEGIN (2) */
void LED_Task(void* pvParameters)
{
    while(1)
    {
        gioSetBit(GPIO_PORTA_BASE, GPIO_PIN_6, 1);
        vTaskDelay(500000 / portTICK_PERIOD_uS);
        gioSetBit(GPIO_PORTA_BASE, GPIO_PIN_6, 0);
        vTaskDelay(500000 / portTICK_PERIOD_uS);
    }
}

void PWM_Control_Task (void* pvParameters)
{
    int ADC_rede, ADC_Ia, ADC_Ib, ADC_Ic;
    float Id_erro0=0, Id_erro1=0, Id_erro2=0, Id_erro3=0, Iq_erro0=0,
          Iq_erro1=0, Iq_erro2=0, Iq_erro3=0, Id, Iq, Idref = 114.0*5, Iqref = 0;

    float controled0=0, controled1=0, controled2=0, controled3=0,
          controleq0=0, controleq1=0 , controleq2=0, controleq3=0;
    adcData_t adc_data[6];
    float seno[6];
    float Idq[2], Iabc[3];
    char sw = 0;
    int sf=0, aux=0;
    uint16 ADC_saida[1000];
    unsigned int i=0, count = 0;

    while(1)
    {
        //INICIA LEITURA DO ADC
        adcStartConversion(adcREG1, 1U);
        //ESPERA LEITURA
        while((adcIsConversionComplete(adcREG1,adcGROUP1))==0);
        //RECUPERA VALORES DO BUFFER DO ADC
        adcGetData(adcREG1, 1U,&adc_data[0]);

        //transformada abc-dq0
        transf_clarkpark(Idq, Iabc, seno);
        Id = Idq[0]; Iq = Idq[1];

        //controle d
        Id_erro0 = Id_erro1;
        Id_erro1 = Id_erro2;
        Id_erro2 = Id_erro3;
        Id_erro3 = Idref - Id;
        controled0 = controled1;
        controled1 = controled2;
        controled2 = controled3;
        controled3 = 8.404*Id_erro3-7.818*Id_erro2-8.393*Id_erro1+7.828*Id_erro0+0.6727*controled2+
                     0.3005*controled1+0.02679*controled0;

        //controle q
        Iq_erro0 = Iq_erro1;
        Iq_erro1 = Iq_erro2;
        Iq_erro2 = Iq_erro3;
        Iq_erro3 = Iqref - Iq;
        controleq0 = controleq1;
        controleq1 = controleq2;
        controleq2 = controleq3;
        controleq3 = 8.404*Iq_erro3-7.818*Iq_erro2-8.393*Iq_erro1+7.828*Iq_erro0+0.6727*controleq2+
                     0.3005*controleq1+0.02679*controleq0;

        //transformada dq0 - abc
        Idq[0] = controled3;
        Idq[1] = controleq3;

        inv_transf_clarkpark(Iabc, Idq, seno);

        //PWM
        etpwmSetCmpA(etpwmREG5, Iabc[0]);
        etpwmSetCmpA(etpwmREG1, Iabc[1]);
        etpwmSetCmpA(etpwmREG4, Iabc[2]);

        vTaskDelay(500000 / portTICK_PERIOD_uS);

    }
}
/* USER CODE END */

int main(void)
{
/* USER CODE BEGIN (3) */
    gioInit();
    adcInit();
    sciInit();
    etpwmInit();
    etpwmStartTBCLK();
    xTaskCreate(LED_Task, "LED_Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 5, NULL);
    vTaskStartScheduler();
    while(1);
/* USER CODE END */

    return 0;
}


/* USER CODE BEGIN (4) */
/* USER CODE END */
